#!/usr/bin/env bash
# set the variables to get distro name, distro id, etc
source /etc/os-release
packages=0
columns=$(tput cols)
memory_unit="gib"
configpath=~/.config/katfetch/config
usage="
-f or --config: specify config file path
-g or --force-figlet: force figlet instead of ascii
-l or --left: print on left
-c or --center: print on center
-a or --art: specify ascii art
"
read -rd '' config <<'EOF'
# This is the katfetch config file

# These are the default colors, you can set them to a tput setaf number or an ansi
# escape sequence color. Don't comment or delete this cuz you'll have no color
sysPageColor=$(tput setaf 6)
bannerTextColor=$(tput setaf 6)
#center=true
#file=~/.ascii

# You can edit this, even add yor own functions in this file, but 
# take note: the printAsciiOrFiglet is for printing the ascii or figlet and you shouldn't touch it
# Also, do not touch the getParams unless you know what you're doing
getParams $@
printAsciiOrFiglet "$File"
getHost
getUserAndHostname
getPkgs
getDistro
getInit
getKernel
getCPU
getArchitecture
getShell
getTerminal
getGPU
getUptime
getDisks
getMemory
getRes
getBattery
EOF

# set colors
resetColor=$(tput sgr0)
boldText=$(tput bold)

err() {
  printf '%s\n' "$2" 1>&2
  [ "$1" -gt 0 ] && exit ""$"1"
}

getParams() {
  while [ "$1" ]; do
    case $1 in
    --art | -a)
      shift
      file="$1"
      [ ! "$file" ] || [ ! -f "$file" ] && err 1 'ascii art does not exist'
      ;;
    --center | -c)
      center=true
      ;;
    --config | -f)
      shift
      if [ ! -f $1 ]; then err 1 'config does not exist'
      else config=$1
      fi
      ;;
    --left | -l)
      center=false
      ;;
    --force-figlet | -g)
      file=""
      ;;
    --help | -h) 
      echo -e "$sysPageColor $usage $resetColor"
      exit 0
      ;;
    -*)
      err 1 'Incorrect option(s) specified.'
      ;;
    *)
      break
      ;;
    esac
    shift
  done
}

printLine() {
  type=$1
  shift
  main=$1
  shift
  if [[ $type == 'Center' ]]; then

    # Get length of plain text characters
    argStr=$*
    len=$((${#argStr} - $# + 1))

    # Generate Padding
    printf -v padding "%$(((columns - len - 1) / 2))s"

    # Print Line
    printf "%s$main\n" "$padding" "$@"

  elif [[ $type == 'Left' ]]; then
    printf "$main\n" "$@"
  fi
}

mkConfig() {
  if [[ ! -f ~/.config/katfetch/config ]]; then
    printf '%b' "$config" > ~/.config/katfetch/config
  fi
}

getPkgs() {
  if [[ -x "$(command -v apk)" ]]; then
    ((packages = packages + $(apk list --installed | wc -l)))
  elif [[ -x "$(command -v apt)" ]]; then
    ((packages = packages + $(apt list --installed | wc -l)))
  elif [[ -x "$(command -v dnf)" ]]; then
    ((packages = packages + $(dnf list --installed | grep -c -v '^Installed Packages$')))
  elif [[ -x "$(command -v pacman)" ]]; then
    ((packages = packages + $(pacman -Q | wc -l)))
  elif [[ -x "$(command -v zypper)" ]]; then
    ((packages = packages + $(zypper search -i | wc -l)))
  elif [[ -x "$(command -v emerge)" ]]; then
    ((packages = packages + $(q qlist -I | wc -l)))
  elif [[ -x "$(command -v nix-store)" ]]; then
    ((packages = packages + $(nix-store -q --references /var/run/current-system/sw | cut -d'-' -f2- | wc -l)))
  elif [[ -x "$(command -v xbps-query)" ]]; then
    ((packages = packages + $(xbps-query -l | awk '{ print $2 }' | xargs -n1 xbps-uhelper getpkgname | wc -l)))
  else
    echo "wtf no package manager?!"
    exit 1
  fi
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "packages: $packages"
}

getHost() {
  # Get the host hardware
  read -r version 2>/dev/null </sys/devices/virtual/dmi/id/product_version
  read -r name 2>/dev/null </sys/devices/virtual/dmi/id/product_name
  read -r mobovendor 2>/dev/null </sys/devices/virtual/dmi/id/board_vendor
  read -r mobo 2>/dev/null </sys/devices/virtual/dmi/id/board_name
  host="$mobovendor $name $version $mobo"

  # Remove generic names
  for word; do
    case $word in
    To | [Bb]e | [Ff]illed | [Bb]y | O.E.M. | OEM | \
      Not | Applicable | Specified | System | Product | Name | \
      Version | Undefined | Default | string | INVALID | ï¿½ | os | \
      Type1ProductConfigId)
      continue
      ;;
    esac
    host="$host$word "
  done
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "host: $host"
}

getGPU() {
  gpu=$(lspci -mm |
    awk -F '\"|\" \"|\\(' \ '/"Display|"3D|"VGA/ {
    a[$0] = $1 " " $3 " " ($(NF-1) ~ /^$|^Device [[:xdigit:]]+$/ ? $4 : $(NF-1))
  }
  END { for (i in a) {
    if (!seen[a[i]]++) {
      sub("^[^ ]+ ", "", a[i]);
      print a[i]
  }}}')
  while read -r line; do printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "gpu: ${line}"; done <<<"$gpu" || printLine "$Alignment" "$boldText $bannerTextColor%s$resetColor" "GPU: $gpu"
}

getRes() {
  res="$(xrandr --nograb --current |
    awk 'match($0,/[0-9]*\.[0-9]*\*/) {
    printf $1 "@" substr($0,RSTART,RLENGTH) "Hz, "}')"
  res="${res//\*/}"
  res="${res%,*}"
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "resolution: $res"
}

getUserAndHostname() {
  userHostname="$(whoami) on $HOSTNAME"
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "user: $userHostname"
}

getCPU() {
  cpuModel="$(cat /proc/cpuinfo | grep 'model name' | uniq | cut -b 12-)"
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "cpu: $cpuModel"
}

getKernel() {
  kernel=$(uname -r)
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "kernel: $kernel"
}

getBattery() {
  battery=$(cat /sys/class/power_supply/BAT0/capacity 2>/dev/null)
  if [[ -f /sys/class/power_supply/BAT0/capacity ]]; then
    printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "battery: ${battery}%"
  fi
}

getUptime() {
  if [[ -r /proc/uptime ]]; then
    s=$(</proc/uptime)
    s=${s/.*/}
  else
    boot=$(date -d"$(uptime -s)" +%s)
    now=$(date +%s)
    s=$((now - boot))
  fi
  d="$((s / 60 / 60 / 24)) days"
  h="$((s / 60 / 60 % 24)) hours"
  m="$((s / 60 % 60)) minutes"

  # Remove plural if < 2.
  ((${d/ */} == 1)) && d=${d/s/}
  ((${h/ */} == 1)) && h=${h/s/}
  ((${m/ */} == 1)) && m=${m/s/}

  # Hide empty fields.
  ((${d/ */} == 0)) && unset d
  ((${h/ */} == 0)) && unset h
  ((${m/ */} == 0)) && unset m
  uptime=${d:+$d, }${h:+$h, }$m
  uptime=${uptime%', '}
  uptime=${uptime:-$s seconds}
  uptime=${uptime//,/}
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "uptime: $uptime"
}

getMemory() {
  while IFS=":" read -r line; do
    mem_used="$(echo "$line" | awk '{print $3}')"
    mem_total="$(echo "$line" | awk '{print $2}')"
  done <<<"$(free -k | grep Mem)"
  mem_used="$((mem_used / 1024))"
  mem_total="$((mem_total / 1024))"
  case $memory_unit in
  gib)
    mem_used=$(awk '{printf "%.2f", $1 / $2}' <<<"$mem_used 1024")
    mem_total=$(awk '{printf "%.2f", $1 / $2}' <<<"$mem_total 1024")
    mem_label=GiB
    ;;

  kib)
    mem_used=$((mem_used * 1024))
    mem_total=$((mem_total * 1024))
    mem_label=KiB
    ;;
  esac
  memory="${mem_used}${mem_label:-MiB} / ${mem_total}${mem_label:-MiB} ${mem_perc:+(${mem_perc}%)}"
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "ram usage: ${memory}"
}

getDisks() {
  diskcmd=$(mount | grep '^/')
  disks=$(while read -r line; do df -h "$(echo $line | awk '{print $3}')" | grep '/'; done <<<"$diskcmd") | uniq
  disk_size=$(df -h / | grep "/dev" | awk '{print $2}')
  while read -r line; do
    disk_used=$(echo "$line" | awk '{print $3}')
    disk_size=$(echo "$line" | awk '{print $2}')
    disk=$(echo "$line" | awk '{print $6}')
    printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "partition $disk usage: $disk_used/$disk_size"
  done <<<"$disks"
}

getInit() {
  init="$(strings /sbin/init | awk 'match($0, /(upstart|systemd|sysinit|runit)/) { print substr($0, RSTART, RLENGTH); exit;  }')"
  if [ "$init" == "sysinit" ]; then init="openrc"; fi
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "init: $init"
}

printAsciiOrFiglet() {
  if [[ "$1" == "" ]]; then
    if $center; then
      Alignment='Center'
      echo -e $bannerTextColor
      figlet -w $(tput cols) -c $NAME
      echo -e $resetColor
    else
      Alignment='Left'
      echo -e $bannerTextColor
      figlet -w $(tput cols) $NAME
      echo -e $resetColor
    fi
  else
    if $center; then
      Alignment='Center'
      echo -e $bannerTextColor
      while read -r line; do
        printLine "$Alignment" "$boldText $bannerTextColor%s$resetColor" "$line"
      done<<<"$(cat $1)"
      echo -e $resetColor
    else
      Alignment='Left'
      echo -e $bannerTextColor
      cat "$1"
      echo -e $resetColor
    fi
  fi
}

getShell() {
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "shell: $SHELL"
}

getDistro() {
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "distro: $PRETTY_NAME"
}

getArchitecture() {
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "architecture: $(uname -m)"
}

getTerminal() {
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "terminal: ${TERM//xterm-/}"
}

mkConfig
source $configpath
