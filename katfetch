#!/usr/bin/env bash
# set the variables to get distro name, distro id, etc
source /etc/os-release
packages=0
columns=$(tput cols)
memory_unit="gib"
if [[ -z "$configpath" ]]; then
  configpath=~/.config/katfetch/config
fi
usage="
you can specify config path in configpath env var
flags:
-g or --force-figlet: force figlet instead of ascii
-l or --left: print on left
-c or --center: print on center
-a or --art: specify ascii art
"
read -rd '' config <<'EOF'
# This is the katfetch config file

# These are the default colors, you can set them to a tput setaf number or an ansi
# escape sequence color. Don't comment or delete this cuz you'll have no color
sysPageColor=$(tput setaf 6)
bannerTextColor=$(tput setaf 6)
#center=true
#file=~/.ascii

# You can edit this, even add yor own functions in this file, but
# take note: the printAsciiOrFiglet is for printing the ascii or figlet and you shouldn't touch it
# Also, do not touch the getParams unless you know what you're doing
getParams $@
printAsciiOrFiglet "$File"
getHost
getUserAndHostname
getPkgs
getDistro
getInit
getKernel
getCPU
getArchitecture
getShell
getTerminal
getGPU
getUptime
getDisks
getMemory
getRes
getBattery
getPlaying
niceMessage
EOF

# set colors
resetColor=$(tput sgr0)
boldText=$(tput bold)

err() {
  printf '%s\n' "$2" 1>&2
  [ "$1" -gt 0 ] && exit ""$"1"
}

niceMessage() {
  timern=$(date +'%p')
  if [[ "${timern^^}" == "AM" ]]; then
    morning=('gib coffe' 'good mernink >_<' 'oooo sunrise' 'i wonder if it is night or day' 'im just a script dont mind me' 'haha ai will take over world' 'sudo rm -rf /*' 'honk' 'honkhonk' 'very stoopid msg' 'u drink tea? >_<')
    echo ""
    printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "${morning[RANDOM%${#morning[@]}]}"
  else
    evening=('get some sleep' 'how do i exit vim help' '>_<' 'haha zsh go brrr' 'honkkkkkkkkkkkkkk' 'goos' 'haha evening >_<' 'emacs is an os' 'sudo rm -rf /*' 'wher coffe' 'oooo sunset' 'i want some tea' 'please put some cake in the cd drive' 'm4st3r h4xx0r' 'katt0 is 3lit3' 'honkhonk' 'good evening >_<' 'dont mind me im just a script hehe >_<' 'please gib cake >_<')
    echo ""
    printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "${evening[RANDOM%${#evening[@]}]}"
  fi
}

getParams() {
  while [ "$1" ]; do
    case $1 in
    --art | -a)
      shift
      file="$1"
      [ ! "$file" ] || [ ! -f "$file" ] && err 1 'ascii art does not exist'
      ;;
    --center | -c)
      center=true
      ;;
    --left | -l)
      center=false
      ;;
    --force-figlet | -g)
      file=""
      ;;
    --help | -h)
      echo -e "$sysPageColor $usage $resetColor"
      exit 0
      ;;
    -*)
      err 1 "config not found"
      ;;
    *)
      break
      ;;
    esac
    shift
  done
}

printLine() {
  type=$1
  shift
  main=$1
  shift
  if [[ $type == 'Center' ]]; then

    # Get length of plain text characters
    argStr=$*
    len=$((${#argStr} - $# + 1))

    # Generate Padding
    printf -v padding "%$(((columns - len - 1) / 2))s"

    # Print Line
    printf "%s$main\n" "$padding" "$@"

  elif [[ $type == 'Left' ]]; then
    printf "$main\n" "$@"
  fi
}

mkConfig() {
  # print config to config file if nonexistent
  if [[ ! -f ~/.config/katfetch/config ]]; then
    mkdir ~/.config/katfetch 2>/dev/null
    printf '%b' "$config" > ~/.config/katfetch/config
  fi
}

getPlaying() {
  if [[ -x "$(command -v playerctl)" ]]; then
    title="$(playerctl metadata -s -i firefox,chromium | grep title | cut -b 40-)"
    artist="$(playerctl metadata -s -i firefox,chromium | grep artist | cut -b 40-)"
    player="$(playerctl metadata -s -i firefox,chromium | grep artist | awk '{print $1}' 2>/dev/null)"
    if [[ "$player" != "" ]]; then
      printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "now playing: $artist - $title"
    fi
  fi
}

getPkgs() {
  # check for package managers in here and exit if none
  if [[ -x "$(command -v apk)" ]]; then
    ((packages = packages + $(apk list --installed | wc -l)))
  elif [[ -x "$(command -v apt)" ]]; then
    ((packages = packages + $(apt list --installed | wc -l)))
  elif [[ -x "$(command -v dnf)" ]]; then
    ((packages = packages + $(dnf list --installed | grep -c -v '^Installed Packages$')))
  elif [[ -x "$(command -v pacman)" ]]; then
    ((packages = packages + $(pacman -Q | wc -l)))
  elif [[ -x "$(command -v zypper)" ]]; then
    ((packages = packages + $(zypper search -i | wc -l)))
  elif [[ -x "$(command -v emerge)" ]]; then
    ((packages = packages + $(q qlist -I | wc -l)))
  elif [[ -x "$(command -v nix-store)" ]]; then
    ((packages = packages + $(nix-store -q --references /var/run/current-system/sw | cut -d'-' -f2- | wc -l)))
  elif [[ -x "$(command -v xbps-query)" ]]; then
    ((packages = packages + $(xbps-query -l | awk '{ print $2 }' | xargs -n1 xbps-uhelper getpkgname | wc -l)))
  else
    echo "wtf no package manager?!"
    exit 1
  fi
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "packages: $packages"
}

getHost() {
  # get the host hardware
  read -r version 2>/dev/null </sys/devices/virtual/dmi/id/product_version
  read -r name 2>/dev/null </sys/devices/virtual/dmi/id/product_name
  read -r mobovendor 2>/dev/null </sys/devices/virtual/dmi/id/board_vendor
  read -r mobo 2>/dev/null </sys/devices/virtual/dmi/id/board_name
  host="$mobovendor $name $version $mobo"
  host=${host//To be filled by O.E.M./}
  host=${host//To Be Filled*/}
  host=${host//OEM*/}
  host=${host//Not Applicable/}
  host=${host//System Product Name/}
  host=${host//System Version/}
  host=${host//Undefined/}
  host=${host//Default string/}
  host=${host//Not Specified/}
  host=${host//Type1ProductConfigId/}
  host=${host//INVALID/}
  host=${host//All Series/}
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "host: $host"
}

getGPU() {
  gpu_cmd=()
  while IFS=":" read -r name; do
    if [[ "${name}" == *"Display"* ]] || [[ "${name}" == *"3D"* ]] || [[ "${name}" == *"VGA"* ]]; then
      IFS='"'
      arr=($name)
      gpu_cmd+=("${arr[3]} ${arr[5]}\n")
    fi
  done <<<"$(lspci -mm)"
  for gpu in "${gpu_cmd[@]}"; do
    # GPU shorthand tests.
    [[ "$gpu_type" == "dedicated" && "$gpu" == *Intel* ]] || [[ "$gpu_type" == "integrated" && ! "$gpu" == *Intel* ]] && {
      unset -v gpu
      continue
    }
    case $gpu in
    *"Advanced"*)
      brand="${gpu/*AMD*ATI*/AMD ATI}"
      brand="${brand:-${gpu/*AMD*/AMD}}"
      brand="${brand:-${gpu/*ATI*/ATi}}"

      gpu="${gpu/\[AMD\/ATI\] /}"
      gpu="${gpu/\[AMD\] /}"
      gpu="${gpu/OEM /}"
      gpu="${gpu/Advanced Micro Devices, Inc./}"
      gpu="${gpu/*\[/}"
      gpu="${gpu/\]*/}"
      gpu="$brand $gpu"
      ;;

    *"NVIDIA"*)
      gpu="${gpu/*\[/}"
      gpu="${gpu/\]*/}"
      gpu="NVIDIA $gpu"
      ;;

    *"Intel"*)
      gpu="${gpu/*Intel/Intel}"
      gpu="${gpu/\(R\)/}"
      gpu="${gpu/Corporation/}"
      gpu="${gpu/ \(*/}"
      gpu="${gpu/Integrated Graphics Controller/}"
      gpu="${gpu/*Xeon*/Intel HD Graphics}"
      gpu="${gpu/*CometLake*/Intel HD Graphics}"
      ;;

    *)
      continue
      ;;
    esac
    printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "gpu: $gpu"
  done
}

getRes() {
  res="$(xrandr --nograb --current |
    awk 'match($0,/[0-9]*\.[0-9]*\*/) {
    printf $1 "@" substr($0,RSTART,RLENGTH) "Hz, "}')"
  res="${res//\*/}"
  res="${res%,*}"
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "resolution: $res"
}

getUserAndHostname() {
  userHostname="$(whoami) on $HOSTNAME"
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "user: $userHostname"
}

getCPU() {
  cpuModel="$(cat /proc/cpuinfo | grep 'model name' | uniq | cut -b 14-)"
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "cpu: $cpuModel"
}

getKernel() {
  kernel=$(uname -r)
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "kernel: $kernel"
}

getBattery() {
  battery=$(cat /sys/class/power_supply/BAT0/capacity 2>/dev/null)
  if [[ -f /sys/class/power_supply/BAT0/capacity ]]; then
    printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "battery: ${battery}%"
  fi
}

getUptime() {
  if [[ -r /proc/uptime ]]; then
    s=$(</proc/uptime)
    s=${s/.*/}
  else
    boot=$(date -d"$(uptime -s)" +%s)
    now=$(date +%s)
    s=$((now - boot))
  fi
  d="$((s / 60 / 60 / 24)) days"
  h="$((s / 60 / 60 % 24)) hours"
  m="$((s / 60 % 60)) minutes"

  # Remove plural if < 2.
  ((${d/ */} == 1)) && d=${d/s/}
  ((${h/ */} == 1)) && h=${h/s/}
  ((${m/ */} == 1)) && m=${m/s/}

  # Hide empty fields.
  ((${d/ */} == 0)) && unset d
  ((${h/ */} == 0)) && unset h
  ((${m/ */} == 0)) && unset m
  uptime=${d:+$d, }${h:+$h, }$m
  uptime=${uptime%', '}
  uptime=${uptime:-$s seconds}
  uptime=${uptime//,/}
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "uptime: $uptime"
}

getMemory() {
  while IFS=":" read -r line; do
    mem_used="$(echo "$line" | awk '{print $3}')"
    mem_total="$(echo "$line" | awk '{print $2}')"
  done <<<"$(free -k | grep Mem)"
  mem_used="$((mem_used / 1024))"
  mem_total="$((mem_total / 1024))"
  case $memory_unit in
  gib)
    mem_used=$(awk '{printf "%.2f", $1 / $2}' <<<"$mem_used 1024")
    mem_total=$(awk '{printf "%.2f", $1 / $2}' <<<"$mem_total 1024")
    mem_label=GiB
    ;;

  kib)
    mem_used=$((mem_used * 1024))
    mem_total=$((mem_total * 1024))
    mem_label=KiB
    ;;
  esac
  memory="${mem_used}${mem_label:-MiB} / ${mem_total}${mem_label:-MiB} ${mem_perc:+(${mem_perc}%)}"
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "ram usage: ${memory}"
}

getDisks() {
  diskcmd=$(mount | grep '^/')
  disks=$(while read -r line; do df -Th $(echo $line | awk '{print $3}') | grep '/'; done <<<"$diskcmd")
  disk_size=$(df -Th | grep "/dev" | awk '{print $3}')
  while read -r line; do
    fs=$(echo "$line" | awk '{print $2}')
    disk_used=$(echo "$line" | awk '{print $4}')
    disk_size=$(echo "$line" | awk '{print $3}')
    disk=$(echo "$line" | awk '{print $7}')
    printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "$fs partition $disk usage: $disk_used/$disk_size"
  done <<<"$disks"
}

getInit() {
  init="$(strings /sbin/init | awk 'match($0, /(upstart|systemd|sysinit|runit)/) { print substr($0, RSTART, RLENGTH); exit;  }')"
  if [ "$init" == "sysinit" ]; then init="openrc"; fi
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "init: $init"
}

printAsciiOrFiglet() {
  if [[ "$1" == "" ]]; then
    if $center; then
      Alignment='Center'
      echo -e $bannerTextColor
      figlet -w $(tput cols) -c $NAME
      echo -e $resetColor
    else
      Alignment='Left'
      echo -e $bannerTextColor
      figlet -w $(tput cols) $NAME
      echo -e $resetColor
    fi
  else
    if $center; then
      Alignment='Center'
      echo -e $bannerTextColor
      while read -r line; do
        printLine "$Alignment" "$boldText $bannerTextColor%s$resetColor" "$line"
      done<<<"$(cat $1)"
      echo -e $resetColor
    else
      Alignment='Left'
      echo -e $bannerTextColor
      cat "$1"
      echo -e $resetColor
    fi
  fi
}

getShell() {
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "shell: $SHELL"
}

getDistro() {
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "distro: $PRETTY_NAME"
}

getArchitecture() {
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "architecture: $(uname -m)"
}

getTerminal() {
  printLine "$Alignment" "$boldText $sysPageColor%s$resetColor" "terminal: ${TERM//xterm-/}"
}

mkConfig
source $configpath
